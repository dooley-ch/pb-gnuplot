;╔═════════════════════════════════════════════════════════════════════════════════════════════════
;║     setup.pbi                                                                           
;╠═════════════════════════════════════════════════════════════════════════════════════════════════
;║     Created: 00-00-2025 
;║
;║     Copyright (c) 2025 James Dooley <james@dooley.ch>
;║
;║     History:
;║     00-00-2025: Initial version
;╚═════════════════════════════════════════════════════════════════════════════════════════════════
DeclareModule SetupModule
  
  Structure WindowInfo
    X.i
    Y.i
    Width.i
    Height.i
  EndStructure
  
  Declare.b GetMainWindowInfo(*record.WindowInfo) ; Returns the main window info
  Declare.b SetMainWindowInfo(*record.WindowInfo) ; Stores the main window info
  
  Declare.s GetApplicationFolder() ; Returns the application folder
  
  Declare.s SetupModuleError() ; Returns last error generated by the library

EndDeclareModule

Module SetupModule
  EnableExplicit
  
  UseModule AppConstants
  UseModule FileUtils
  
  #CONFIG_FILE = "app.cfg"
  
  Define lastError$ = ""
  
  Procedure WriteDefaultConfigFile(fileName$)
    OpenPreferences(fileName$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup("main-window")
        WritePreferenceInteger("x", #MainWindow_X)
        WritePreferenceInteger("y", #MainWindow_Y)
        WritePreferenceInteger("width", #MainWindow_Min_Width)
        WritePreferenceInteger("height", #MainWindow_Min_Height)
    ClosePreferences()
  EndProcedure
  
  ;┌───────────────────────────────────────────────────────────────────────────────────────────────
  ;│     Public     
  ;└───────────────────────────────────────────────────────────────────────────────────────────────

  ; Returns last error generated by the library
  Procedure.s SetupModuleError()
    Shared lastError$
    ProcedureReturn lastError$
  EndProcedure
  
  ; Returns the main window info
  Procedure.b GetMainWindowInfo(*record.WindowInfo) 
    Protected fileName$ = MakePath(GetApplicationFolder(), #CONFIG_FILE)
    
    If Not FileExists(fileName$)
      WriteDefaultConfigFile(fileName$)
    EndIf
    
    OpenPreferences(fileName$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup("main-window")
        With *record
          \X = ReadPreferenceInteger("x", #MainWindow_X)
          \Y = ReadPreferenceInteger("y", #MainWindow_Y)
          \Width = ReadPreferenceInteger("width", #MainWindow_Min_Width)
          \Height = ReadPreferenceInteger("height", #MainWindow_Min_Height)
        EndWith
    ClosePreferences()
  EndProcedure
  
  ; Stores the main window info
  Procedure.b SetMainWindowInfo(*record.WindowInfo) 
    Protected fileName$ = MakePath(GetApplicationFolder(), #CONFIG_FILE)
    
    OpenPreferences(fileName$, #PB_Preference_GroupSeparator, #PB_UTF8)
      PreferenceGroup("main-window")
        With *record
          WritePreferenceInteger("x", \X)
          WritePreferenceInteger("y", \Y)
          WritePreferenceInteger("width", \Width)
          WritePreferenceInteger("height", \Height)
        EndWith
    ClosePreferences()    
  EndProcedure
  
  ; Returns the application folder
  Procedure.s GetApplicationFolder() 
    Protected appFolder$, homeFolder$ = GetHomeDirectory()
    
    ; FIX: Remove last seperator
    homeFolder$ = Left(homeFolder$, Len(homeFolder$) - 1)
    
    ; Ensure the organisation folder exists
    appFolder$ = MakePath(homeFolder$, #ORGANISATION)
    If Not FolderExists(appFolder$)
      CreateDirectory(appFolder$)
    EndIf
    
    ; Ensure the application folder exists
    appFolder$ = MakePath(appFolder$, #APPLICATION)
    If Not FolderExists(appFolder$)
      CreateDirectory(appFolder$)
    EndIf
    
    ProcedureReturn appFolder$
  EndProcedure
  
EndModule
; IDE Options = PureBasic 6.21 - C Backend (MacOS X - arm64)
; ExecutableFormat = Console
; CursorPosition = 70
; FirstLine = 55
; Folding = --
; EnableXP
; DPIAware